{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposeDebugDrawer <p>This library offers you a simple and easily extendable debug drawer.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>easily extendible</li> <li>one line integration</li> <li>can be easily enabled/diabled in debug/release builds or based on a user setting</li> <li>predefined optional modules</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"Drawer Modules"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows macos wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  Modules <code>infos-build</code>                    \u2714                                     -                                     -                                     -                                     -                  <code>infos-device</code>                    \u2714                                     -                                     -                                     -                                     -                  Plugins <code>plugin-kotpreferences</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>plugin-lumberjack</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     -"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.8.2</code> Uses jetpack compose <code>1.8.2</code> and material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental. I will provide new versions as soon as possible if experimental APIs change or become stable.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Modules <code>infos-build</code> - <code>infos-device</code> - Plugins <code>plugin-kotpreferences</code> KotPreferences <code>2.0.0</code> <code>plugin-lumberjack</code> Lumberjack <code>9.0.0</code>"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composedebugdrawer = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composedebugdrawer:core:$composedebugdrawer\")\n\n// modules\nimplementation(\"io.github.mflisar.composedebugdrawer:infos-build:$composedebugdrawer\")\nimplementation(\"io.github.mflisar.composedebugdrawer:infos-device:$composedebugdrawer\")\n\n// plugins\nimplementation(\"io.github.mflisar.composedebugdrawer:plugin-kotpreferences:$composedebugdrawer\")\nimplementation(\"io.github.mflisar.composedebugdrawer:plugin-lumberjack:$composedebugdrawer\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposedebugdrawer = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposedebugdrawer-core = { module = \"io.github.mflisar.composedebugdrawer:core\", version.ref = \"composedebugdrawer\" }\n\n# modules\ncomposedebugdrawer-infos-build = { module = \"io.github.mflisar.composedebugdrawer:infos-build\", version.ref = \"composedebugdrawer\" }\ncomposedebugdrawer-infos-device = { module = \"io.github.mflisar.composedebugdrawer:infos-device\", version.ref = \"composedebugdrawer\" }\n\n# plugins\ncomposedebugdrawer-plugin-kotpreferences = { module = \"io.github.mflisar.composedebugdrawer:plugin-kotpreferences\", version.ref = \"composedebugdrawer\" }\ncomposedebugdrawer-plugin-lumberjack = { module = \"io.github.mflisar.composedebugdrawer:plugin-lumberjack\", version.ref = \"composedebugdrawer\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composedebugdrawer.core)\n\n# modules\nimplementation(libs.composedebugdrawer.infos.build)\nimplementation(libs.composedebugdrawer.infos.device)\n\n# plugins\nimplementation(libs.composedebugdrawer.plugin.kotpreferences)\nimplementation(libs.composedebugdrawer.plugin.lumberjack)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#debug-drawer","title":"Debug Drawer","text":"<pre><code>// wrap your app content inside the drawer like following\nval drawerState = rememberDebugDrawerState()\nComposeAppTheme  {\n    DebugDrawer(\n        enabled = BuildConfig.DEBUG, // if disabled the drawer will not be created at all, in this case inside a release build...\n        drawerState = drawerState,\n        drawerContent = {\n            // drawer content\n        },\n        content = {\n            // your wrapped app content\n        }\n    )\n}\n</code></pre>"},{"location":"usage/#example-drawer-content","title":"Example Drawer Content","text":"<pre><code>@Composable\nprivate fun Drawer(drawerState: DebugDrawerState) {\n    DebugDrawerBuildInfos(drawerState)\n    DebugDrawerActions(drawerState)\n    DebugDrawerDeviceInfos(drawerState)\n\n    // lumberjack module for logs\n    DebugDrawerLumberjack(\n        drawerState = drawerState,\n        setup = DemoLogging.fileLoggingSetup,\n        mailReceiver = \"feedback@gmail.com\"\n    )\n\n    // kotpreferences module for delegate based preferences (another library of mine)\n    DebugDrawerRegion(\n        image = { Icon(Icons.Default.ColorLens, null) },\n        label = \"Demo Preferences\",\n        drawerState = drawerState\n    ) {\n        DebugDrawerDivider(info = \"Boolean\")\n        DebugDrawerSettingCheckbox(setting = DemoPrefs.devBoolean1)\n        DebugDrawerSettingCheckbox(setting = DemoPrefs.devBoolean2)\n        DebugDrawerDivider(info = \"Enum\")\n        DebugDrawerSettingDropdown(setting = DemoPrefs.devStyle,items = DemoPrefs.UIStyle.values())\n    }\n\n    // manual checkboxes, dropdowns, infos\n    DebugDrawerRegion(\n        image = { Icon(Icons.Default.Info, null) },\n        label = \"Manual\",\n        drawerState = drawerState\n    ) {\n        // Checkbox\n        var test1 by remember { mutableStateOf(false) }\n        DebugDrawerCheckbox(\n            label = \"Checkbox\",\n            description = \"Some debug flag\",\n            checked = test1\n        ) {\n            test1 = it\n        }\n\n        // Button\n        DebugDrawerButton(\n            image = { Icon(Icons.Default.BugReport, null) },\n            label = \"Button (Filled)\"\n        ) {\n            // on click\n        }\n\n        // Dropdown\n        val items = listOf(\"Entry 1\", \"Entry 2\", \"Entry 3\")\n        var selected by remember { mutableStateOf(items[0]) }\n        DebugDrawerDropdown(\n            modifier = modifier,\n            label = \"Items\",\n            selected = selected,\n            items = items\n        ) {\n            selected = it\n        }\n\n        // Sectioned Button\n        val items2 = listOf(\"L1\", \"L2\", \"L3\")\n        val level = remember { mutableStateOf(items2[0]) }\n        DebugDrawerSegmentedButtons(\n            selected = level, \n            items = items2\n        )\n\n        // Info\n        DebugDrawerInfo(title = \"Custom Info\", info = \"Value of custom info...\")\n    }\n}\n</code></pre>"},{"location":"migration/v0.7.1/","title":"v0.7.1","text":"<p>I removed all overloads for <code>ImageVector</code>, please update your code like following:</p>"},{"location":"migration/v0.7.1/#old","title":"OLD","text":"<pre><code>DebugDrawer*(\n    icon = Icons.Default.Info\n)\n</code></pre>"},{"location":"migration/v0.7.1/#new","title":"NEW","text":"<pre><code>DebugDrawer*(\n    image= { Icon(Icons.Default.Info, null) }\n)\n</code></pre>"},{"location":"modules/build-infos/","title":"Build Infos","text":"<p>The <code>infos-build</code> module allows you to add a build info region to the debug drawer.</p> <pre><code>DebugDrawerBuildInfos(drawerState)\n</code></pre> Info Module"},{"location":"modules/device-infos/","title":"Device Infos","text":"<p>The <code>infos-device</code> module allows you to add a build info region to the debug drawer.</p> <pre><code>DebugDrawerBuildInfos(drawerState)\n</code></pre> Device Module"},{"location":"plugins/kotpreferences/","title":"KotPreferences","text":"<p>The <code>plugin-kotpreferences</code> provides a seemless integration of my KotPreferences library.</p> <p>This simple module allows you to use my delegate based preference library <code>KotPreferences</code> inside the debug drawer. With this extension labels are e.g. directly derived from the KotPreference property. It offers composables for <code>Checkbox</code>, <code>Dropdown</code> and <code>SegmentedButton</code> debug drawer fields.</p> <pre><code>fun DebugDrawerSettingCheckbox(\n    setting: StorageSetting&lt;Boolean&gt;,\n    modifier: Modifier = Modifier,\n    image: @Composable (() -&gt; Unit)? = null,\n    foregroundTint: Color? = null,\n    label: String = setting.getDebugLabel(),\n    description: String = \"\"\n)\n\nfun &lt;T&gt; DebugDrawerSettingDropdown(\n    modifier: Modifier = Modifier,\n    setting: StorageSetting&lt;T&gt;,\n    items: List&lt;T&gt;,\n    image: @Composable (() -&gt; Unit)? = null,\n    label: String = setting.getDebugLabel(),\n    labelProvider: (item: T) -&gt; String = { it.toString() }\n)\n\nfun &lt;T&gt; DebugDrawerSettingSegmentedButtons(\n    modifier: Modifier = Modifier,\n    setting: StorageSetting&lt;T&gt;,\n    items: List&lt;T&gt;,\n    image: @Composable (() -&gt; Unit)? = null,\n    labelProvider: (item: T) -&gt; String = { it.toString() }\n)\n</code></pre>"},{"location":"plugins/lumberjack/","title":"Lumberjack","text":"<p>The <code>plugin-lumberjack</code> provides a seemless integration of my Lumberjack library.</p> <p>Add following to the drawer to add a lumberjack region to it.</p> <pre><code>@Composable\nfun DebugDrawerLumberjack(\n    drawerState: DebugDrawerState,\n    setup: IFileLoggingSetup,\n    mailReceiver: String,\n    image: @Composable (() -&gt; Unit)? = { Icon(Icons.Default.Description, null) },\n    label: String = \"Logging\",\n    id: String = label,\n    collapsible: Boolean = true,\n    content: @Composable ColumnScope.() -&gt; Unit = {}\n)\n</code></pre> Lumberjack Plugin"}]}